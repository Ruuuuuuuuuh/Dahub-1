<?php

namespace App\Listeners;

use App\Events\OrderConfirmed;
use App\Events\OrderPending;
use App\Models\System;
use App\Models\User;
use App\Notifications\ConfirmOrder;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;
use NotificationChannels\Telegram\Exceptions\CouldNotSendNotification;
use Telegram\Bot\Api;
use Telegram\Bot\FileUpload\InputFile;

class SendConfirmedNotifications
{
    /**
     * Create the event listener.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }

    /**
     * Handle the event.
     *
     * @param  OrderConfirmed  $event
     * @return void
     */
    public function handle(OrderConfirmed $event)
    {
        $owner = User::where('uid', $event->order->user_uid)->first();

        try {
            $owner->notify(new ConfirmOrder($event->order));
        } catch (CouldNotSendNotification $e) {
            report ($e);
        }

        if ($event->order->destination == 'TokenSale') {
            $transactions = $event->order->transactions();
            $telegram = new Api(env('TELEGRAM_BOT_EXPLORER_TOKEN'));
            foreach ($transactions as $transaction) {
                if ($transaction->payable_type == 'App\Models\System' && $transaction->type = 'withdraw') {
                    $event->order->transaction()->attach($transaction->id);
                    $systemWallet = System::findOrFail(1);
                    $systemWallet->getWallet('TokenSale')->refreshBalance();

                    try {
                        $telegram->sendMessage([
                            'chat_id' => env('TELEGRAM_EXPLORER_CHAT_ID'),
                            'text' => '<b>üÜï Transaction created</b> ' . $transaction->created_at->format('d.m.Y H:i') .PHP_EOL.'<b>‚ÜóÔ∏è Sent: </b>' . $event->order->amount . ' ' . $event->order->currency .PHP_EOL.'<b>‚ÜôÔ∏è Recieved: </b>' . $event->order->dhb_amount . ' DHB' .PHP_EOL.'<b>#Ô∏è‚É£ Hash: </b>' . $transaction->uuid. PHP_EOL.PHP_EOL.'<b>üî• TokenSale: </b>'. number_format($systemWallet->getWallet('TokenSale')->balanceFloat, 0, '.', ' ') . ' DHB left until the end of stage 1',
                            'parse_mode' => 'html'
                        ]);
                    } catch (CouldNotSendNotification $e) {
                        report ($e);
                    }

                }
            }
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ –∫—É–ø–∏–ª —Ç–æ–∫–µ–Ω—ã
            if ($owner->orders()->where('status', 'completed')->where('destination', 'TokenSale')->get()->count() == 1) {
                try {
                    $telegram = new Api(env('TELEGRAM_BOT_TOKEN'));
                    $telegram->sendPhoto([
                        'chat_id' => $owner->uid,
                        'photo' => InputFile::create("https://test.dahub.app/img/welcome.png"),
                        'caption' =>
                            '<b>–ù–∞ —Å–≤—è–∑–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ DaHub!</b>'
                            . PHP_EOL .
                            '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –≤ –Ω–∞—à–∏ –ø–∞–±–ª–∏–∫–∏, —á–∞—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π –∏ –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞.'
                            . PHP_EOL . PHP_EOL .
                            '‚ñ™Ô∏è <a href="https://t.me/+Uydxy_Jmh-3Y_BUg">Dahub for owners of DHB</a> ‚Äì –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π DHB'
                            . PHP_EOL .
                            '‚ñ™Ô∏è <a href="https://t.me/DA_HUB">Dahub News</a> ‚Äì –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞'
                            . PHP_EOL .
                            '‚ñ™Ô∏è <a href="https://t.me/DaHubExplorer">Dahub Explorer</a> ‚Äì –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ'
                            . PHP_EOL .
                            '‚ñ™Ô∏è <a href="https://t.me/DaHubSupportBot?start=public">DaHubSupportBot</a> ‚Äì —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å —Å—é–¥–∞;)'
                            . PHP_EOL . PHP_EOL .
                            '–ú—ã –∑–∞ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é, –ø–∏—à–∏, –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –¥–µ–ª–∏—Å—å –∏–Ω—Å–∞–π—Ç–∞–º–∏. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DaHub DAO!',
                        'parse_mode' => 'html',
                    ]);
                }
                catch (CouldNotSendNotification $e) {
                    report ($e);
                }
            }
        }
    }
}
