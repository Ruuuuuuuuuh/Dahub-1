<?php

namespace App\Helpers;
use App\Models\Message;
use App\Models\Order;
use App\Models\System;
use App\Models\User;
use NotificationChannels\Telegram\Exceptions\CouldNotSendNotification;
use Telegram\Bot\Api;
use Telegram\Bot\Exceptions\TelegramSDKException;
use Telegram\Bot\FileUpload\InputFile;


class ConfirmOrder
{
    /**
     * –ú–æ–¥–µ–ª—å —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏
     *
     * @var Order
     */
    protected Order $order;

    /**
     * Create a new job instance.
     *
     * @param Order $order
     * @throws TelegramSDKException
     */
    public function __construct(Order $order)
    {
        $this->order = $order;
        $owner = User::where('uid', $this->order->user_uid)->first();
        $gate  = User::where('uid', $this->order->gate)->first();
        if ($this->order != 'completed') {
            if ($this->order->destination == 'deposit') {
                $transaction = $owner->getWallet($this->order->currency)->depositFloat($this->order->amount, array('destination' => 'deposit to wallet'));
                $owner->getWallet($this->order->currency)->refreshBalance();
                $this->order->status = 'completed';
                $this->order->transaction()->attach($transaction->id);
                $this->order->save();
            }
            if ($this->order->destination == 'TokenSale') {
                $systemWallet = System::findOrFail(1);
                $transaction = $systemWallet->getWallet('TokenSale')->transferFloat( $owner->getWallet('DHB'), $this->order->dhb_amount, array('destination' => 'TokenSale', 'order_id' => $this->order->id));

                $owner->getWallet('DHB')->refreshBalance();
                $wID = $transaction->withdraw_id;
                $this->order->transaction()->attach($wID);

                // deposit to system wallet
                $systemWallet->getWallet($this->order->currency)->depositFloat($this->order->amount,  array('destination' => 'TokenSale', 'order_id' => $this->order->id));
                $systemWallet->getWallet($this->order->currency)->refreshBalance();
                $this->order->status = 'completed';
                $this->order->save();

                // pay Referral
                new \App\Helpers\PayReferral($owner, $this->order->currency, $this->order->amount);

                // ConfirmedNotificationsJob
                new \App\Helpers\ExplorerMessage($this->order);

                // –ë–æ–Ω—É—Å –∑–∞ —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
                $systemWallet->getWallet('DHBFundWallet')->transferFloat( $gate->getWallet('DHB'), $this->order->dhb_amount / 200, array('destination' => '–ë–æ–Ω—É—Å –∑–∞ —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏', 'order_id' => $this->order->id));
                $systemWallet->getWallet('DHBFundWallet')->refreshBalance();
                $gate->getWallet('DHB')->refreshBalance();

            }

            try {
                $owner->notify(new \App\Notifications\ConfirmOrder($this->order));
            } catch (CouldNotSendNotification $e) {
                report ($e);
            }

            $message = Message::where('order_id', $this->order->id)->first();
            if ($message) {
                try {
                    $telegram = new Api(env('TELEGRAM_BOT_GATE_ORDERS_TOKEN'));
                    $telegram->editMessageText([
                        'chat_id' => $message->chat_id,
                        'message_id' => $message->message_id,
                        'text' => $message->message . PHP_EOL . 'üèÅ <b>–ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>',
                        'parse_mode' => 'html',
                        'reply_markup' => NULL
                    ]);
                } catch (TelegramSDKException $e) {
                    report ($e);
                }
            }

            if ($this->order->destination == 'TokenSale') {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ –∫—É–ø–∏–ª —Ç–æ–∫–µ–Ω—ã
                if ($owner->orders()->where('status', 'completed')->where('destination', 'TokenSale')->get()->count() == 1) {
                    try {
                        $telegram = new Api(env('TELEGRAM_BOT_TOKEN'));
                        $telegram->sendPhoto([
                            'chat_id' => $owner->uid,
                            'photo' => InputFile::create(env('APP_URL')."/img/welcome.png"),
                            'caption' =>
                                '<b>–ù–∞ —Å–≤—è–∑–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ DAHUB!</b>'
                                . PHP_EOL .
                                '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –≤ –Ω–∞—à–∏ –ø–∞–±–ª–∏–∫–∏, —á–∞—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π –∏ –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞.'
                                . PHP_EOL . PHP_EOL .
                                '‚≠ê <a href="https://t.me/DaHubBot">DAHUB Bot</a> ‚Äì –≥–ª–∞–≤–Ω—ã–π –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–∞—Ö –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∑–∞–∫—Ä–µ–ø –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ –∫–æ—à–µ–ª—å–∫—É.'
                                . PHP_EOL .
                                'üï∂ <a href="https://t.me/+Uydxy_Jmh-3Y_BUg">DAHUB for owners of DHB</a> ‚Äì –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π DHB'
                                . PHP_EOL .
                                'üì£ <a href="https://t.me/DA_HUB">DAHUB News</a> ‚Äì –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞'
                                . PHP_EOL .
                                'üîç <a href="https://t.me/DaHubExplorer">DAHUB Explorer</a> ‚Äì –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ'
                                . PHP_EOL .
                                'üí¨ <a href="https://t.me/DaHubSupportBot?start=public">DaHubSupportBot</a> ‚Äì —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å —Å—é–¥–∞;)'
                                . PHP_EOL . PHP_EOL .
                                '–ú—ã –∑–∞ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é, –ø–∏—à–∏, –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –¥–µ–ª–∏—Å—å –∏–Ω—Å–∞–π—Ç–∞–º–∏. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DAHUB DAO!',
                            'parse_mode' => 'html',
                        ]);
                    }
                    catch (CouldNotSendNotification $e) {
                        report ($e);
                    }
                }
            }

            $gate->getBalance($this->order->currency.'_gate');
            $gate->getWallet($this->order->currency.'_gate')->depositFloat($this->order->amount, array('destination' => 'deposit to wallet', 'order_id' => $this->order->id));
            $gate->getWallet($this->order->currency.'_gate')->refreshBalance();
        }

        return $this->order->id;
    }

    /**
     * Notifications Method
     */
    public function notify() {

    }
}
